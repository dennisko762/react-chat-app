{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Dennis\\\\Desktop\\\\ReactBuilds\\\\React Chat App\\\\chat\\\\src\\\\components\\\\Chat\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport \"./Chat.css\";\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const ENDPOINT = \"localhost:5000\";\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    //fetching the information from the link to get room and name\n    //using destructured parameters\n    const {\n      name,\n      room\n    } = queryString.parse(location.search); //line above is equivalent to const name=queryString.parse(location.search).name\n    //                                       queryString.parse(location.search).room\n\n    console.log(location.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room); //emit is an event send to all clients\n    //operation: join, some payload, a callback that we passed in the index.js\n\n    socket.emit(\"join\", {\n      name,\n      room\n    }, () => {}); //unmounting \n\n    return () => {\n      socket.emit(\"disconnect\");\n      console.log(\"we cleaned up \");\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on(\"message\", message => {\n      setMessages([...messages, message]); //adding every new msg on top of the previous messages(...messages)\n    });\n  }, [messages]);\n\n  const sendMessage = e => {\n    e.preventDefault();\n\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        onKeyPress: e => e.key === 'Enter' ? sendMessage(e) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 1\n  }, this);\n};\n\n_s(Chat, \"ZdfNTPfTgH5FcHC8JcWQPdGo4Ng=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/Dennis/Desktop/ReactBuilds/React Chat App/chat/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","socket","Chat","location","name","setName","room","setRoom","ENDPOINT","messages","setMessages","message","setMessage","parse","search","console","log","emit","off","on","sendMessage","e","preventDefault","target","value","key"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAS,YAAT;AAGA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAC,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAc;AAAA;;AACrB,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAeR,QAAQ,CAAC,EAAD,CAA7B;AACA,QAAM,CAACS,IAAD,EAAMC,OAAN,IAAeV,QAAQ,CAAC,EAAD,CAA7B;AACA,QAAMW,QAAQ,GAAC,gBAAf;AACA,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAuBb,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACc,OAAD,EAASC,UAAT,IAAqBf,QAAQ,CAAC,EAAD,CAAnC;AAEJC,EAAAA,SAAS,CAAC,MAAI;AACV;AACA;AACC,UAAM;AAACM,MAAAA,IAAD;AAAME,MAAAA;AAAN,QAAYP,WAAW,CAACc,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAAlB,CAHS,CAKV;AACA;;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACW,MAArB;AACAb,IAAAA,MAAM,GAACD,EAAE,CAACQ,QAAD,CAAT;AAEDH,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP,CAZW,CAcV;AACA;;AACDL,IAAAA,MAAM,CAACgB,IAAP,CAAY,MAAZ,EAAmB;AAACb,MAAAA,IAAD;AAAME,MAAAA;AAAN,KAAnB,EAA+B,MAAI,CAElC,CAFD,EAhBW,CAmBX;;AACA,WAAM,MAAI;AACNL,MAAAA,MAAM,CAACgB,IAAP,CAAY,YAAZ;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACCf,MAAAA,MAAM,CAACiB,GAAP;AAEJ,KALD;AAMF,GA1BQ,EA0BP,CAACV,QAAD,EAAUL,QAAQ,CAACW,MAAnB,CA1BO,CAAT;AA6BAhB,EAAAA,SAAS,CAAC,MAAI;AACVG,IAAAA,MAAM,CAACkB,EAAP,CAAU,SAAV,EAAqBR,OAAD,IAAW;AAC/BD,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAaE,OAAb,CAAD,CAAX,CAD+B,CACI;AAClC,KAFD;AAGH,GAJQ,EAIP,CAACF,QAAD,CAJO,CAAT;;AAMA,QAAMW,WAAW,GAAEC,CAAD,IAAK;AACnBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAGX,OAAH,EAAW;AACPV,MAAAA,MAAM,CAACgB,IAAP,CAAY,aAAZ,EAA0BN,OAA1B,EAAkC,MAAIC,UAAU,CAAC,EAAD,CAAhD;AACH;AACJ,GALD;;AAMAG,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ,EAAoBF,QAApB;AAEI,sBACJ;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI;AAAO,QAAA,KAAK,EAAEE,OAAd;AAAuB,QAAA,QAAQ,EAAGU,CAAD,IAAKT,UAAU,CAACS,CAAC,CAACE,MAAF,CAASC,KAAV,CAAhD;AACA,QAAA,UAAU,EAAEH,CAAC,IAAEA,CAAC,CAACI,GAAF,KAAQ,OAAR,GAAkBL,WAAW,CAACC,CAAD,CAA7B,GAAiC;AADhD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADI;AAUH,CA5DD;;GAAMnB,I;;KAAAA,I;AA6DN,eAAeA,IAAf","sourcesContent":["import React,{useState,useEffect} from \"react\"\r\nimport queryString from \"query-string\"\r\nimport io from \"socket.io-client\"\r\nimport   \"./Chat.css\"\r\n\r\n\r\nlet socket;\r\n\r\nconst Chat=({location})=>{\r\n    const [name,setName]=useState(\"\");\r\n    const [room,setRoom]=useState(\"\");\r\n    const ENDPOINT=\"localhost:5000\"\r\n    const [messages,setMessages]=useState([]);\r\n    const [message,setMessage]=useState(\"\")\r\n\r\nuseEffect(()=>{\r\n    //fetching the information from the link to get room and name\r\n    //using destructured parameters\r\n     const {name,room}=queryString.parse(location.search)\r\n    \r\n    //line above is equivalent to const name=queryString.parse(location.search).name\r\n    //                                       queryString.parse(location.search).room\r\n\r\n    console.log(location.search)\r\n    socket=io(ENDPOINT)\r\n\r\n   setName(name)\r\n   setRoom(room)\r\n\r\n    //emit is an event send to all clients\r\n    //operation: join, some payload, a callback that we passed in the index.js\r\n   socket.emit(\"join\",{name,room},()=>{\r\n    \r\n   })\r\n   //unmounting \r\n   return()=>{\r\n       socket.emit(\"disconnect\");\r\n       console.log(\"we cleaned up \")\r\n        socket.off()\r\n\r\n   }\r\n},[ENDPOINT,location.search])\r\n\r\n\r\nuseEffect(()=>{\r\n    socket.on(\"message\",(message)=>{\r\n    setMessages([...messages,message]) //adding every new msg on top of the previous messages(...messages)\r\n    })\r\n},[messages])\r\n\r\nconst sendMessage=(e)=>{\r\n    e.preventDefault()\r\n    if(message){\r\n        socket.emit(\"sendMessage\",message,()=>setMessage(\"\"))\r\n    }\r\n}\r\nconsole.log(message,messages)\r\n\r\n    return(\r\n<div className=\"outerContainer\">\r\n    <div className=\"container\">\r\n        <input value={message} onChange={(e)=>setMessage(e.target.value)}\r\n        onKeyPress={e=>e.key==='Enter' ? sendMessage(e):null}></input>\r\n    </div>\r\n</div>\r\n\r\n\r\n    )\r\n}\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}